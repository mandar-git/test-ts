"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk8s_1 = require("cdk8s");
const cdk8s_plus_22_1 = require("cdk8s-plus-22");
//import { Deployment, RestartPolicy } from 'cdk8s-plus-22';
const app = new cdk8s_1.App();
const appChart = new cdk8s_1.Chart(app, 'demoApplication');
//const appLabels = { app: 'demo-app', logicalEnv: 'dit', 'applicationId': 'ap009999' };
let psc = new cdk8s_plus_22_1.PodSecurityContext({
    ensureNonRoot: true,
    sysctls: [],
    user: 1001,
});
const pod = new cdk8s_plus_22_1.Pod(appChart, 'test-pod', { securityContext: psc });
const ctx = new cdk8s_plus_22_1.ContainerSecurityContext({
    ensureNonRoot: true,
    privileged: false,
    readOnlyRootFilesystem: true
});
pod.addContainer({
    image: 'org.com/hello-world',
    name: 'hello-w-ctr',
    imagePullPolicy: cdk8s_plus_22_1.ImagePullPolicy.ALWAYS,
    port: 80,
    securityContext: ctx
});
pod.addInitContainer({ image: 'curlimages/curl', 'command': ['curl 169.254.169.254/latest/metadata/ipv4'] });
const deployContainer = new cdk8s_plus_22_1.Container({
    image: 'org.com/hello-world',
    name: 'deploy-ctr',
    imagePullPolicy: cdk8s_plus_22_1.ImagePullPolicy.ALWAYS,
    port: 80,
    securityContext: ctx
});
console.log(deployContainer);
/*
new Deployment(appChart, 'deployment',{
  replicas: 2,
  restartPolicy: RestartPolicy.ON_FAILURE,
  //containers: [deployContainer],
  metadata: { name: 'test-deploy', 'namespace': 'default', labels: { app: 'demo-deploy-app'}},
  podMetadata: {labels: appLabels},
  securityContext: psc
})
*/
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFtQztBQUNuQyxpREFBOEc7QUFDOUcsNERBQTREO0FBR3hELE1BQU0sR0FBRyxHQUFHLElBQUksV0FBRyxFQUFFLENBQUM7QUFDdEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxhQUFLLENBQUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDbkQsd0ZBQXdGO0FBRXhGLElBQUksR0FBRyxHQUFHLElBQUksa0NBQWtCLENBQUM7SUFDL0IsYUFBYSxFQUFFLElBQUk7SUFDbkIsT0FBTyxFQUFFLEVBQUU7SUFDWCxJQUFJLEVBQUUsSUFBSTtDQUNYLENBQUMsQ0FBQTtBQUNGLE1BQU0sR0FBRyxHQUFHLElBQUksbUJBQUcsQ0FBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLEVBQUMsZUFBZSxFQUFFLEdBQUcsRUFBQyxDQUFDLENBQUM7QUFDaEUsTUFBTSxHQUFHLEdBQUcsSUFBSSx3Q0FBd0IsQ0FBQztJQUN2QyxhQUFhLEVBQUMsSUFBSTtJQUNsQixVQUFVLEVBQUMsS0FBSztJQUNoQixzQkFBc0IsRUFBRSxJQUFJO0NBQzdCLENBQUMsQ0FBQztBQUNILEdBQUcsQ0FBQyxZQUFZLENBQUM7SUFDZixLQUFLLEVBQUUscUJBQXFCO0lBQzVCLElBQUksRUFBRSxhQUFhO0lBQ25CLGVBQWUsRUFBRSwrQkFBZSxDQUFDLE1BQU07SUFDdkMsSUFBSSxFQUFFLEVBQUU7SUFDUixlQUFlLEVBQUUsR0FBRztDQUNyQixDQUFDLENBQUM7QUFDSCxHQUFHLENBQUMsZ0JBQWdCLENBQUMsRUFBQyxLQUFLLEVBQUUsaUJBQWlCLEVBQUMsU0FBUyxFQUFHLENBQUMsMkNBQTJDLENBQUMsRUFBQyxDQUFDLENBQUE7QUFHMUcsTUFBTSxlQUFlLEdBQUcsSUFBSSx5QkFBUyxDQUFDO0lBQ3BDLEtBQUssRUFBRSxxQkFBcUI7SUFDNUIsSUFBSSxFQUFFLFlBQVk7SUFDbEIsZUFBZSxFQUFFLCtCQUFlLENBQUMsTUFBTTtJQUN2QyxJQUFJLEVBQUUsRUFBRTtJQUNSLGVBQWUsRUFBRSxHQUFHO0NBQ3JCLENBQUMsQ0FBQztBQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUE7QUFFNUI7Ozs7Ozs7OztFQVNFO0FBRU4sR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwLCBDaGFydCB9IGZyb20gJ2NkazhzJztcclxuaW1wb3J0IHsgQ29udGFpbmVyLCBDb250YWluZXJTZWN1cml0eUNvbnRleHQsIEltYWdlUHVsbFBvbGljeSwgUG9kLCBQb2RTZWN1cml0eUNvbnRleHQgfSBmcm9tICdjZGs4cy1wbHVzLTIyJztcclxuLy9pbXBvcnQgeyBEZXBsb3ltZW50LCBSZXN0YXJ0UG9saWN5IH0gZnJvbSAnY2RrOHMtcGx1cy0yMic7XHJcblxyXG5cclxuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcclxuICAgIGNvbnN0IGFwcENoYXJ0ID0gbmV3IENoYXJ0KGFwcCwgJ2RlbW9BcHBsaWNhdGlvbicpO1xyXG4gICAgLy9jb25zdCBhcHBMYWJlbHMgPSB7IGFwcDogJ2RlbW8tYXBwJywgbG9naWNhbEVudjogJ2RpdCcsICdhcHBsaWNhdGlvbklkJzogJ2FwMDA5OTk5JyB9O1xyXG4gICAgXHJcbiAgICBsZXQgcHNjID0gbmV3IFBvZFNlY3VyaXR5Q29udGV4dCh7XHJcbiAgICAgIGVuc3VyZU5vblJvb3Q6IHRydWUsXHJcbiAgICAgIHN5c2N0bHM6IFtdLFxyXG4gICAgICB1c2VyOiAxMDAxLFxyXG4gICAgfSlcclxuICAgIGNvbnN0IHBvZCA9IG5ldyBQb2QoYXBwQ2hhcnQsJ3Rlc3QtcG9kJyx7c2VjdXJpdHlDb250ZXh0OiBwc2N9KTtcclxuICAgIGNvbnN0IGN0eCA9IG5ldyBDb250YWluZXJTZWN1cml0eUNvbnRleHQoe1xyXG4gICAgICBlbnN1cmVOb25Sb290OnRydWUsIFxyXG4gICAgICBwcml2aWxlZ2VkOmZhbHNlLCBcclxuICAgICAgcmVhZE9ubHlSb290RmlsZXN5c3RlbTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBwb2QuYWRkQ29udGFpbmVyKHsgXHJcbiAgICAgIGltYWdlOiAnb3JnLmNvbS9oZWxsby13b3JsZCcsIFxyXG4gICAgICBuYW1lOiAnaGVsbG8tdy1jdHInLCBcclxuICAgICAgaW1hZ2VQdWxsUG9saWN5OiBJbWFnZVB1bGxQb2xpY3kuQUxXQVlTLCBcclxuICAgICAgcG9ydDogODAsIFxyXG4gICAgICBzZWN1cml0eUNvbnRleHQ6IGN0eCBcclxuICAgIH0pO1xyXG4gICAgcG9kLmFkZEluaXRDb250YWluZXIoe2ltYWdlOiAnY3VybGltYWdlcy9jdXJsJywnY29tbWFuZCcgOiBbJ2N1cmwgMTY5LjI1NC4xNjkuMjU0L2xhdGVzdC9tZXRhZGF0YS9pcHY0J119KVxyXG4gICAgXHJcblxyXG4gICAgY29uc3QgZGVwbG95Q29udGFpbmVyID0gbmV3IENvbnRhaW5lcih7XHJcbiAgICAgIGltYWdlOiAnb3JnLmNvbS9oZWxsby13b3JsZCcsIFxyXG4gICAgICBuYW1lOiAnZGVwbG95LWN0cicsIFxyXG4gICAgICBpbWFnZVB1bGxQb2xpY3k6IEltYWdlUHVsbFBvbGljeS5BTFdBWVMsIFxyXG4gICAgICBwb3J0OiA4MCwgXHJcbiAgICAgIHNlY3VyaXR5Q29udGV4dDogY3R4XHJcbiAgICB9KTtcclxuICAgIGNvbnNvbGUubG9nKGRlcGxveUNvbnRhaW5lcilcclxuXHJcbiAgICAvKlxyXG4gICAgbmV3IERlcGxveW1lbnQoYXBwQ2hhcnQsICdkZXBsb3ltZW50Jyx7XHJcbiAgICAgIHJlcGxpY2FzOiAyLFxyXG4gICAgICByZXN0YXJ0UG9saWN5OiBSZXN0YXJ0UG9saWN5Lk9OX0ZBSUxVUkUsXHJcbiAgICAgIC8vY29udGFpbmVyczogW2RlcGxveUNvbnRhaW5lcl0sXHJcbiAgICAgIG1ldGFkYXRhOiB7IG5hbWU6ICd0ZXN0LWRlcGxveScsICduYW1lc3BhY2UnOiAnZGVmYXVsdCcsIGxhYmVsczogeyBhcHA6ICdkZW1vLWRlcGxveS1hcHAnfX0sXHJcbiAgICAgIHBvZE1ldGFkYXRhOiB7bGFiZWxzOiBhcHBMYWJlbHN9LFxyXG4gICAgICBzZWN1cml0eUNvbnRleHQ6IHBzY1xyXG4gICAgfSlcclxuICAgICovXHJcblxyXG5hcHAuc3ludGgoKTtcclxuIl19